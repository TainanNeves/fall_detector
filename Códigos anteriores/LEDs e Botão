#include<Wire.h>//Biblioteca para comunicação I2C
#define ledam 8
#define ledver 9
#define buzzer 10
#define ajuda 7
#define dispensa 6


const int MPU_addr=0x68; //Endereço do sensor
float queda;
long tempo;

int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ; //Variaveis para pegar os valores medidos




void setup(){
  Wire.begin(); //Inicia a comunicação I2C
  Wire.beginTransmission(MPU_addr); //Começa a transmissao de dados para o sensor
  Wire.write(0x6B); // registrador PWR_MGMT_1
  Wire.write(0); // Manda 0 e "acorda" o MPU 6050
  Wire.endTransmission(true);

  pinMode(ledam, OUTPUT);
  pinMode(ledver, OUTPUT);
  pinMode(buzzer, OUTPUT);

  pinMode(ajuda, INPUT);
  pinMode(dispensa, INPUT);



  Serial.begin(9600); //Inicia a comunicaçao serial (para exibir os valores lidos)


}



void loop(){
  Wire.beginTransmission(MPU_addr); //Começa a transmissao de dados para o sensor
  Wire.write(0x3B); // registrador dos dados medidos (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true); // faz um "pedido" para ler 14 registradores, que serão os registrados com os dados medidos
  AcX=Wire.read()<<8|Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
  AcY=Wire.read()<<8|Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ=Wire.read()<<8|Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp=Wire.read()<<8|Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX=Wire.read()<<8|Wire.read(); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY=Wire.read()<<8|Wire.read(); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ=Wire.read()<<8|Wire.read(); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)

  //Agora escreve os valores no monitor serial
  /*
  Serial.print("AcX = "); Serial.print(AcX);
  Serial.print(" | AcY = "); Serial.print(AcY);
  Serial.print(" | AcZ = "); Serial.print(AcZ);
  Serial.print(" | Tmp = "); Serial.print(Tmp/340.00+36.53); //Equação da temperatura em Cº de acordo com o datasheet
  Serial.print(" | GyX = "); Serial.print(GyX);
  Serial.print(" | GyY = "); Serial.print(GyY);
  Serial.print(" | GyZ = "); Serial.println(GyZ);*/
  delay(100);

  queda = sqrt(pow(AcX, 2)+pow(AcY, 2)+pow(AcZ, 2));
  //Serial.println(queda);
  
  if (queda > 40000) {
    digitalWrite(ledam,HIGH);
    digitalWrite(ledver, HIGH);
    digitalWrite(buzzer,HIGH);
    Serial.println("houve uma possível queda ");
    unsigned long startTime = millis(); // Store the start time
    while (millis() - startTime < 10000) { // Check if 10 seconds haven't passed
      
      if (digitalRead(ajuda) == HIGH) {
        digitalWrite(ledver, LOW);
        digitalWrite(ledam, LOW);
        digitalWrite(buzzer, LOW);
        Serial.println("Preciso de ajuda"); // Print message when the 'ajuda' button is pressed
        delay(2000);
      return; // Exit the function after printing the message
     }
      //Serial.println("ver 2");
      if (digitalRead(dispensa) == HIGH) {
        digitalWrite(ledam, LOW);
        digitalWrite(ledver, LOW);
        digitalWrite(buzzer, LOW);
        Serial.println("NÃO preciso de ajuda"); // Print message when the 'dispensa' button is pressed
        delay(2000);
        return; // Exit the function after printing the message
      }
    // Add some delay to avoid busy-waiting and allow other tasks to run (optional)
      delay(100);
      if(millis() - startTime > 10000){
        Serial.println("TEMPO ESGOTADO Preciso de ajuda");
        delay(2000);

    
    }   
    
  }


  }
if (digitalRead(ajuda) == HIGH) {
  digitalWrite(ledam, LOW);
  digitalWrite(buzzer, LOW);
  Serial.println("Preciso de ajuda"); // Print message when the 'ajuda' button is pressed
  delay(2000);
}
digitalWrite(ledam, LOW);
digitalWrite(buzzer, LOW);
//delay(2000);
}
